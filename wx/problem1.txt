#include <iostream>
#include <vector>
using namespace std ;

void findpath( vector<int>& path,const int& aim,int L,int R){
    int root = (L+R)/2 ;
    if( aim==root ){
        path.push_back(root) ;
        return ;
    }
    if( aim > root ){
        path.push_back(root) ;
        findpath(path,aim,root+1,R) ;
    }
    else if( aim < root ){
        path.push_back(root) ;
        findpath(path,aim,L,R-1) ;
    }
}

void problem1(){
    int k;
    int node1,node2,node3 ;
    cin>>k>>node1>>node2>>node3 ;

    vector<int> path1 ;
    vector<int> path2 ;
    vector<int> path3 ;

    int left = 1 ;
    int right = pow(2,k)-1 ;
    int root = (left+right)/2 ;
    
    findpath(path1,node1,left,right) ;
    findpath(path2,node2,left,right) ;
    findpath(path3,node3,left,right) ;

    int common = root ;
    for( int i=0;i<path1.size()&&i<path2.size()&&i<path3.size();++i ){
        if( path1[i]==path2[i] && path2[i] == path3[i] ){
            common = path1[i] ;
        }
        else{
            break ;
        }
    }
    cout<<common<<endl ;
}

int main(){
    problem1() ;
    return 0;
}